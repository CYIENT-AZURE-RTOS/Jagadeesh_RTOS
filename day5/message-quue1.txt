///* USER CODE BEGIN Header */
///**
//  ******************************************************************************
//  * @file    app_threadx.c
//  * @author  MCD Application Team
//  * @brief   ThreadX applicative file
//  ******************************************************************************
//    * @attention
//  *
//  * Copyright (c) 2023 STMicroelectronics.
//  * All rights reserved.
//  *
//  * This software is licensed under terms that can be found in the LICENSE file
//  * in the root directory of this software component.
//  * If no LICENSE file comes with this software, it is provided AS-IS.
//  *
//  ******************************************************************************
//  */
///* USER CODE END Header */
//
///* Includes ------------------------------------------------------------------*/
//#include "app_threadx.h"
//
///* Private includes ----------------------------------------------------------*/
///* USER CODE BEGIN Includes */
//
///* USER CODE END Includes */
//
///* Private typedef -----------------------------------------------------------*/
///* USER CODE BEGIN PTD */
//
///* USER CODE END PTD */
//
///* Private define ------------------------------------------------------------*/
///* USER CODE BEGIN PD */
//
///* USER CODE END PD */
//
///* Private macro -------------------------------------------------------------*/
///* USER CODE BEGIN PM */
//
///* USER CODE END PM */
//
///* Private variables ---------------------------------------------------------*/
///* USER CODE BEGIN PV */
//
///* USER CODE END PV */
//
///* Private function prototypes -----------------------------------------------*/
///* USER CODE BEGIN PFP */
//
///* USER CODE END PFP */
//
///**
//  * @brief  Application ThreadX Initialization.
//  * @param memory_ptr: memory pointer
//  * @retval int
//  */
//UINT App_ThreadX_Init(VOID *memory_ptr)
//{
//  UINT ret = TX_SUCCESS;
//  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
//
//   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
//  (void)byte_pool;
//  /* USER CODE END App_ThreadX_MEM_POOL */
//
//  /* USER CODE BEGIN App_ThreadX_Init */
//  /* USER CODE END App_ThreadX_Init */
//
//  return ret;
//}
//
//  /**
//  * @brief  MX_ThreadX_Init
//  * @param  None
//  * @retval None
//  */
//void MX_ThreadX_Init(void)
//{
//  /* USER CODE BEGIN  Before_Kernel_Start */
//
//  /* USER CODE END  Before_Kernel_Start */
//
//  tx_kernel_enter();
//
//  /* USER CODE BEGIN  Kernel_Start_Error */
//
//  /* USER CODE END  Kernel_Start_Error */
//}
//
///* USER CODE BEGIN 1 */
//
///* USER CODE END 1 */





/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    app_threadx.c
  * @author  MCD Application Team
  * @brief   ThreadX applicative file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "app_threadx.h"
#include <stdint.h>
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
TX_THREAD ThreadOne;
TX_THREAD ThreadTwo;
TX_QUEUE quue_0;
extern UART_HandleTypeDef huart1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void ThreadOne_Entry(ULONG thread_input);
void ThreadTwo_Entry(ULONG thread_input);
void App_Delay(uint32_t Delay);
/* USER CODE END PFP */

/**
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
  UINT ret = TX_SUCCESS;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  CHAR *pointer,*pointer2;

  /* Allocate the stack for ThreadOne.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
  }

  /* Create ThreadOne.  */
  if (tx_thread_create(&ThreadOne, "Thread One", ThreadOne_Entry, 0,
                       pointer, APP_STACK_SIZE,
                       THREAD_ONE_PRIO, THREAD_ONE_PREEMPTION_THRESHOLD,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
  }

  /* Allocate the stack for ThreadTwo.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
                        APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
   {
     ret = TX_POOL_ERROR;
   }



   /* Create ThreadTwo.  */
   if (tx_thread_create(&ThreadTwo, "Thread Two", ThreadTwo_Entry, 0,
                        pointer, APP_STACK_SIZE,
                        THREAD_TWO_PRIO, THREAD_TWO_PREEMPTION_THRESHOLD,
                        TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
   {
     ret = TX_THREAD_ERROR;
   }

   if ((tx_queue_create(&quue_0, "quue o", 16, (VOID *) pointer2, 2000))!= TX_SUCCESS) {
	   ret= TX_QUEUE_ERROR;
   }
  /* USER CODE END App_ThreadX_Init */

  return ret;
}

  /**
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}

/* USER CODE BEGIN 1 */

void ThreadOne_Entry(ULONG thread_input)
{
  uint8_t t1_count=0;
  uint8_t msg[100]="\n\r####hello jagadeesh####";
  uint32_t status;
  while(1)                                    /* Infinite loop */
  {
	 HAL_UART_Transmit(&huart1, "\n\r ## thread1 mesasge ##", 50, 100);
	 status= tx_queue_send(&quue_0, msg, TX_WAIT_FOREVER);
  //  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);    /* Toggle Green LED */
   if (TX_SUCCESS== status){
	   HAL_UART_Transmit(&huart1, "\n\r ## sent message to quue ##", 50, 100);
	   tx_thread_sleep(100);
   }
   else{
	   HAL_UART_Transmit(&huart1, "\n\r ## FAILED TO sent message to quue ##", 50, 100);
   }
  }
}



void ThreadTwo_Entry(ULONG thread_input)
{
  uint8_t msg_tx[100]="\n\rtemp data";
  UINT status;


  while(1)                                    /* Infinite loop */
  {
	  HAL_UART_Transmit(&huart1, "\n\r ## thread 2 received the quue ##", 50, 100);
	  status= tx_queue_receive(&quue_0, msg_tx, TX_WAIT_FOREVER);
	  if (TX_SUCCESS== status){
		   HAL_UART_Transmit(&huart1, "\n\r ##succesfully received message to quue ##", 50, 100);
		   tx_thread_sleep(100);
	   }
	   else{
		   HAL_UART_Transmit(&huart1, "\n\r ## FAILED TO recive sent message to quue ##", 50, 100);
	   }
  }
}





/**
  * @brief  Application Delay function.
  * @param  Delay : number of ticks to wait
  * @retval None
  */
void App_Delay(uint32_t Delay)
{
  UINT initial_time = tx_time_get();
  while ((tx_time_get() - initial_time) < Delay);
}

/* USER CODE END 1 */
